所有的命令不理解都可以git help <command> 来查看manaul的帮助，最好的参考来的

最简单最常用的
===========
git clone http://192.168.1.100:8080/git/repos/freediameter.git
git pull                #从远程仓库下载更新到本地
git branch  -r          #查看远程分支名字
git checkout -b <branch> <remote>/<branch>       # 把远程分支代码checkout到本地新分支
$ git checkout -b work/issue/92 origin/work/issue/92
$ git branch
  master
* work/issue/92

提交所有改动了的文件
==================

git commit -p  这个自动让你选择所有修改过的文件，然后提交。 当然用GUI程序集成的功能，commit的时候自动就选了所有改动过的文件，更方便了。用命令行，必须的用-p参数啊，自己用git help commit查看
类似的有：
git add  -p
git log -p
git checkout -p

利用回收站保存临时修改
====================
git stash save  保存当前已经修改的但还没有提交的文件的状态。
然后去做其他的修改，checkout 到另外branch 等等
git stash pop  还原到原来的那些文件状态。
非常方便的，还有一些其他命令可以git help stash 看帮助

利用回收站功能丢弃当前的所有修改
git stash
git stash clear

删除远程分支
============
git push origin --delete <branchName>

git log 输出里面 commit右边sha-1  hash值标识一个commit改动，但一般使用前面几个就个标识一个commit了，看文档一般用前面4位。应该这个sha-1前4位出现冲突的情况都比较少才能这样用吧
git checkout -b fixes 1b6d

修改分支名字
============
，如果新的分支名字已经存在要用-M ,不然-m
git branch -m  work/issue93  work/issue/93

rebase调整分支的继承结构
=======================
以前 work/issue/92是从master 继承而来的。
做了下面这个命令之后，work/issue/92分支会变成从 origin/freediameter-1.1继承而来。
当前branch所有的修改也合并过去。
git rebase origin/freediameter-1.1
git push -f   参数覆盖远程分支上面已经存在的work/issue/92 分支

丢弃所有未commit和已经commit的修改
====================
$ git reset  --hard HEAD
做完这个所有被修改的文件，没有提交的都被丢弃。还原回最初的状态。
git help reset，自己reset的帮助，可以用来撤销前面几次的commit记录，merge 记录，add 记录等。文档举例很有参考价值。

HEAD好似一个游标，通常指向最新提交，随最新提交向前移动。一些Git命令让你来移动 它。 例如：

$ git reset HEAD~3
将立即向回移动HEAD三个提交。这样所有Git命令都表现得好似你没有做那最后三个提交， 然而你的文件保持在现在的状态。具体应用参见帮助页。

但如何回到将来呢？过去的提交对将来一无所知。

如果你有原先Head的SHA1值，那么：

$ git reset 1b6d
但假设你从来没有记下呢？别担心，像这些命令，Git保存原先的Head为一个叫 ORGI_HEAD的标记，你可以安全体面的返回：

$ git reset ORIG_HEAD

这个还原上次提交，但过程会被记录下来被作为一个新的提交
 git revert 1b6d
讲撤销给定哈希值的提交。本撤销被记录为一个新的提交

git checkout -f   force选项可以强制checkout，并且丢弃本地位未提交的修改

重做多个commit的记录，把多个commit合并到一个里面里面
先用reset回撤到commit e20bec14，但保留文件修改, 然后再重写提交记录，把多个commit的记录换成一个等
git reset --soft e20bec14
git commit -m "重写的commit修改状态"

查看修改历史
===========
git log --oneline --decorate --graph

查看某次commit修改了那些内容
git show <commit hash>
比如
git show a0a394bc5fd6

git reflog
查看分支历史，比git log 看起来方便一些。

制作patch
=========
git  diff可以查看当前没提交的修改，应该也是可以用来制作patch的在 Windows的 GUI里面，就很容易用图形界面的查看diff。不过git format-patch  好处是可以包含commit的历史记录

1.
--
把所有当前分支的修改，但修改不再origin分支里面的
Extract all commits which are in the current branch but not in the origin branch:
$ git format-patch origin

$ git format-patch  freediameter-1.2   从原始分支freediameter-1.2开始到当前的所有修改

在当前目录下会输出所有的patch，一个commit历史记录一个patch文件。默认用commit 信息里面的第一行来作为文件名
0001-add-PDN-Connection-ID-AVP.patch
0002-add-Dynamic-Address-Flag-AVP.patch
0003-add-IMSI-Unauthenticated-Flag-AVP.patch

一般工作都是从一个原始分支新建一个分支来工作，然后上面这个输出这个新分支的所有修改的命令比较合适吧。

2.
--
--stdout 把所有的输出到打印标准输出，不创建多个patch文件了。我比较喜欢这种方式
git format-patch --stdout freediameter-1.2

3.
--
-<n>  指定一个数字，表示最近的几次commit修改
git format-patch --stdout -1    最近的1个commit
git format-patch --stdout -3    最近的3个commit

Extract three topmost commits from the current branch and format them as e-mailable patches:
$ git format-patch -3

4.
--
用 git am命令可以应用这个patch文件。 相当于patch -p<n>命令吧，不过专门针对git patch，可能历史记录更好吧。
Extract commits between revisions R1 and R2, and apply them on top of the current branch using git am to cherry-pick them:
$ git format-patch -k --stdout R1..R2 | git am -3 -k
可以参考 “gitrevisions” 的帮助文档查看revision的语法，一种是直接用git log 里面看到commit 后面的<sha1> 哈希数字(一般用前面几位数字就可以个完整标识一个commit)，一种是常用HEAD等关键字。
比如上面的语法就来自下面这个range表示方法
<rev1>..<rev2>
Include commits that are reachable from <rev2> but exclude those that are reachable from <rev1>. When either <rev1> or <rev2> is omitted, it defaults to HEAD.

参考gitrevisions 帮助文档 Git/doc/git/html/gitrevisions.html 后面有个图示解释
<rev>^, e.g. HEAD^, v1.5.1^0
A suffix ^ to a revision parameter means the first parent of that commit object. ^<n> means the <n>th parent (i.e. <rev>^ is equivalent to <rev>^1). As a special rule, <rev>^0 means the commit itself and is used when <rev> is the object name of a tag object that refers to a commit object.
<rev>~<n>, e.g. master~3
A suffix ~<n> to a revision parameter means the commit object that is the <n>th generation ancestor of the named commit object, following only the first parents. I.e. <rev>~3 is equivalent to <rev>^^^ which is equivalent to <rev>^1^1^1. See below for an illustration of the usage of this form.
原文有个图示，解释的比较清楚，<rev>^加数字是多继承的第几个parent节点，<rev>~是前面的第几代parent
所下面这个命令在单继承树上等价于 git format-patch -2 命令
$ git format-patch HEAD~2

修改最后一次提交的信息
========================
$ git commit --amend
会启动一个编辑器窗口，让你重写上次commit信息，但要配置editor才行，参考最后面的editor配置。Windows的git可以用他内置的 vim。
刚提交，但你期望你输入的是一条不同的信息？那么键入：

$ git commit --amend
来改变上一条信息。意识到你还忘记了加一个文件？运行git add来加，然后运行上面的 命令。

希望在上次提交里包括多一点的改动？那么就做这些改动并运行：

$ git commit --amend -a

还有git rebase -i HEAD~10 这样还原大量的修改的，参考下面的两个文档

把提交状态回撤到commit e20bec14，但文件修改保留, 然后重写提交记录，把多个commit的记录换成一个等
git reset --soft e20bec14
git commit -m "重写commit修改状态"

git的设置
=======
比如user name都记录到commit 里面
git config user.name xxx
git config user.email xxx@xxx.com
其实就是修改配置文件，也可以直接去改动吧
$(prefix)/etc/gitconfig
~/.gitconfig
 $GIT_DIR/config   .git/config
分别对应参数 --system, --global, --local 。
默认就是--local在当前的代码仓库的 .git/config文件里面设置
自己git help config看一下
git config --list 可以查看当前设置

git的默认编辑器修改
================
git config --global core.editor "vim"
git是按照设置GIT_EDITOR 环境变量,core.editor 设置，VISUAL 环境变量， EDITOR 环境变量的顺序来选择到底使用那个编辑器来写commit信息的。
export GIT_EDITOR=vim
export VISUAL=vim
export EDITOR=vim

查看历史
===============
git log -p -2   显示最近两次commit的内容差异diff

git log --stat  显示commit历史的修改行数

字符图形显示log的继承关系
git log --pretty=format:"%h %s" --graph

远程分支
=========
git remote -v     查看远程仓库
git remote add pb git://github.com/paulboone/ticgit.git 添加远程仓库pb
git fetch pb  从远程仓库pb取内容
git remote rename pb paul 远程仓库的删除和重命名
git remote rm paul
git remote show origin  查看远程仓库内容

选择性的把某个分支上面的某次commit  merge过来
=========
git  cherry-pick  dfd484f12

格式化代码源文件
==============
git stripspace
可以把代码行尾的空格删掉，还有空白行删掉，很好用的命令
git diff  --check 可以检查这种“空格错误”
--check
Warn if changes introduce whitespace errors. What are considered whitespace errors is controlled by core.whitespace configuration. By default, trailing whitespaces (including lines that solely consist of whitespaces) and a space character that is immediately followed by a tab character inside the initial indent of the line are considered whitespace errors. Exits with non-zero status if problems are found. Not compatible with --exit-code.

打包git目录树的所有文件
=======================
git archive --format=zip -o  webrtc_latest.zip HEAD
可以方便的把git的目录打包到一个压缩包里面，可以指定某个branch之类的。

更改远程服务器地址
================

git remote -v
origin	http://192.168.100.105:8080/git/repos/myproject.git (fetch)
origin	http://192.168.100.105:8080/git/repos/myproject.git (push)
git remote set-url origin http://192.168.4.203:8080/git/repos/myproject.git


学习参考：
=========
Git Magic
http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/index.html

图书 Git Pocket Guide.pdf

Pro Git bookhttp://git-scm.com/book/zh/
